{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sumit\\\\OneDrive\\\\Desktop\\\\SHAPE\\\\shape-detector\\\\frontend\\\\src\\\\components\\\\ShapeResult.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Card, ListGroup, Badge } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ShapeResult = ({\n  shapes\n}) => {\n  _s();\n  const [isHovered, setIsHovered] = useState(false);\n\n  // Function to get badge color based on shape type\n  const getBadgeColor = shape => {\n    const colorMap = {\n      triangle: \"warning\",\n      square: \"primary\",\n      rectangle: \"info\",\n      pentagon: \"success\",\n      circle: \"danger\",\n      ellipse: \"secondary\",\n      hexagon: \"dark\",\n      irregular: \"light\"\n    };\n    return colorMap[shape] || \"secondary\";\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      perspective: \"1000px\",\n      marginBottom: \"20px\"\n    },\n    onMouseEnter: () => setIsHovered(true),\n    onMouseLeave: () => setIsHovered(false),\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      style: {\n        transform: isHovered ? \"rotateY(-5deg) rotateX(5deg)\" : \"rotateY(0deg) rotateX(0deg)\",\n        transition: \"transform 0.3s ease, box-shadow 0.3s ease\",\n        transformStyle: \"preserve-3d\",\n        boxShadow: isHovered ? \"rgba(0, 0, 0, 0.1) 5px 5px 15px, rgba(0, 0, 0, 0.07) 15px 15px 20px\" : \"rgba(0, 0, 0, 0.1) 0px 4px 12px, rgba(0, 0, 0, 0.05) 0px 1px 3px\",\n        borderRadius: \"10px\",\n        border: \"1px solid rgba(255,255,255,0.2)\",\n        overflow: \"hidden\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n        style: {\n          borderBottom: \"1px solid rgba(0,0,0,0.05)\",\n          position: \"relative\",\n          zIndex: 1,\n          transform: isHovered ? \"translateZ(10px)\" : \"translateZ(0)\",\n          transition: \"transform 0.3s ease\",\n          backgroundColor: \"var(--light-blue)\",\n          color: \"var(--primary-black)\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"mb-0\",\n          children: \"Detected Shapes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n        style: {\n          position: \"relative\",\n          zIndex: 0,\n          transform: isHovered ? \"translateZ(5px)\" : \"translateZ(0)\",\n          transition: \"transform 0.3s ease\"\n        },\n        children: shapes.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-muted\",\n          children: \"No shapes detected in the image.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Found \", shapes.length, \" shape(s) in the image:\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ListGroup, {\n            variant: \"flush\",\n            children: shapes.map((item, index) => /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n              className: \"d-flex flex-column\",\n              style: {\n                transform: isHovered ? `translateZ(${15 - index * 2}px)` : \"translateZ(0)\",\n                transition: \"transform 0.3s ease\",\n                borderRadius: \"6px\",\n                marginBottom: \"8px\",\n                boxShadow: isHovered ? \"0 2px 4px rgba(0,0,0,0.05)\" : \"none\"\n              },\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"d-flex justify-content-center align-items-center\",\n                children: /*#__PURE__*/_jsxDEV(Badge, {\n                  bg: getBadgeColor(item.shape),\n                  style: {\n                    transform: isHovered ? \"translateZ(5px) scale(1.05)\" : \"translateZ(0) scale(1)\",\n                    transition: \"transform 0.3s ease\",\n                    boxShadow: isHovered ? \"0 2px 4px rgba(0,0,0,0.1)\" : \"none\",\n                    fontSize: \"1rem\",\n                    padding: \"0.5rem 1rem\"\n                  },\n                  children: item.shape.charAt(0).toUpperCase() + item.shape.slice(1)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 90,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 89,\n                columnNumber: 21\n              }, this)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n_s(ShapeResult, \"FPQn8a98tPjpohC7NUYORQR8GJE=\");\n_c = ShapeResult;\nexport default ShapeResult;\nvar _c;\n$RefreshReg$(_c, \"ShapeResult\");","map":{"version":3,"names":["React","useState","Card","ListGroup","Badge","jsxDEV","_jsxDEV","ShapeResult","shapes","_s","isHovered","setIsHovered","getBadgeColor","shape","colorMap","triangle","square","rectangle","pentagon","circle","ellipse","hexagon","irregular","style","perspective","marginBottom","onMouseEnter","onMouseLeave","children","transform","transition","transformStyle","boxShadow","borderRadius","border","overflow","Header","borderBottom","position","zIndex","backgroundColor","color","className","fileName","_jsxFileName","lineNumber","columnNumber","Body","length","variant","map","item","index","Item","bg","fontSize","padding","charAt","toUpperCase","slice","_c","$RefreshReg$"],"sources":["C:/Users/sumit/OneDrive/Desktop/SHAPE/shape-detector/frontend/src/components/ShapeResult.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { Card, ListGroup, Badge } from \"react-bootstrap\";\n\nconst ShapeResult = ({ shapes }) => {\n  const [isHovered, setIsHovered] = useState(false);\n\n  // Function to get badge color based on shape type\n  const getBadgeColor = (shape) => {\n    const colorMap = {\n      triangle: \"warning\",\n      square: \"primary\",\n      rectangle: \"info\",\n      pentagon: \"success\",\n      circle: \"danger\",\n      ellipse: \"secondary\",\n      hexagon: \"dark\",\n      irregular: \"light\",\n    };\n    return colorMap[shape] || \"secondary\";\n  };\n\n  return (\n    <div\n      style={{\n        perspective: \"1000px\",\n        marginBottom: \"20px\",\n      }}\n      onMouseEnter={() => setIsHovered(true)}\n      onMouseLeave={() => setIsHovered(false)}\n    >\n      <Card\n        style={{\n          transform: isHovered\n            ? \"rotateY(-5deg) rotateX(5deg)\"\n            : \"rotateY(0deg) rotateX(0deg)\",\n          transition: \"transform 0.3s ease, box-shadow 0.3s ease\",\n          transformStyle: \"preserve-3d\",\n          boxShadow: isHovered\n            ? \"rgba(0, 0, 0, 0.1) 5px 5px 15px, rgba(0, 0, 0, 0.07) 15px 15px 20px\"\n            : \"rgba(0, 0, 0, 0.1) 0px 4px 12px, rgba(0, 0, 0, 0.05) 0px 1px 3px\",\n          borderRadius: \"10px\",\n          border: \"1px solid rgba(255,255,255,0.2)\",\n          overflow: \"hidden\",\n        }}\n      >\n        <Card.Header\n          style={{\n            borderBottom: \"1px solid rgba(0,0,0,0.05)\",\n            position: \"relative\",\n            zIndex: 1,\n            transform: isHovered ? \"translateZ(10px)\" : \"translateZ(0)\",\n            transition: \"transform 0.3s ease\",\n            backgroundColor: \"var(--light-blue)\",\n            color: \"var(--primary-black)\",\n          }}\n        >\n          <h4 className=\"mb-0\">Detected Shapes</h4>\n        </Card.Header>\n        <Card.Body\n          style={{\n            position: \"relative\",\n            zIndex: 0,\n            transform: isHovered ? \"translateZ(5px)\" : \"translateZ(0)\",\n            transition: \"transform 0.3s ease\",\n          }}\n        >\n          {shapes.length === 0 ? (\n            <p className=\"text-muted\">No shapes detected in the image.</p>\n          ) : (\n            <div>\n              <p>Found {shapes.length} shape(s) in the image:</p>\n              <ListGroup variant=\"flush\">\n                {shapes.map((item, index) => (\n                  <ListGroup.Item\n                    key={index}\n                    className=\"d-flex flex-column\"\n                    style={{\n                      transform: isHovered\n                        ? `translateZ(${15 - index * 2}px)`\n                        : \"translateZ(0)\",\n                      transition: \"transform 0.3s ease\",\n                      borderRadius: \"6px\",\n                      marginBottom: \"8px\",\n                      boxShadow: isHovered\n                        ? \"0 2px 4px rgba(0,0,0,0.05)\"\n                        : \"none\",\n                    }}\n                  >\n                    <div className=\"d-flex justify-content-center align-items-center\">\n                      <Badge\n                        bg={getBadgeColor(item.shape)}\n                        style={{\n                          transform: isHovered\n                            ? \"translateZ(5px) scale(1.05)\"\n                            : \"translateZ(0) scale(1)\",\n                          transition: \"transform 0.3s ease\",\n                          boxShadow: isHovered\n                            ? \"0 2px 4px rgba(0,0,0,0.1)\"\n                            : \"none\",\n                          fontSize: \"1rem\",\n                          padding: \"0.5rem 1rem\",\n                        }}\n                      >\n                        {item.shape.charAt(0).toUpperCase() +\n                          item.shape.slice(1)}\n                      </Badge>\n                    </div>\n                  </ListGroup.Item>\n                ))}\n              </ListGroup>\n            </div>\n          )}\n        </Card.Body>\n      </Card>\n    </div>\n  );\n};\n\nexport default ShapeResult;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}