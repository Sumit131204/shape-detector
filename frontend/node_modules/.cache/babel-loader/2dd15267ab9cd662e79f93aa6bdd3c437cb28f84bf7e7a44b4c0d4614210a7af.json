{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sumit\\\\OneDrive\\\\Desktop\\\\SHAPE\\\\shape-detector\\\\frontend\\\\src\\\\components\\\\ShapeResult.js\";\nimport React from \"react\";\nimport { Card, ListGroup, Badge } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ShapeResult = ({\n  shapes\n}) => {\n  // Function to get badge color based on shape type\n  const getBadgeColor = shape => {\n    const colorMap = {\n      triangle: \"warning\",\n      square: \"primary\",\n      rectangle: \"info\",\n      pentagon: \"success\",\n      circle: \"danger\"\n    };\n    return colorMap[shape] || \"secondary\";\n  };\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n      className: \"bg-light\",\n      children: /*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"mb-0\",\n        children: \"Detected Shapes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n      children: shapes.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-muted\",\n        children: \"No shapes detected in the image.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Found \", shapes.length, \" shape(s) in the image:\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ListGroup, {\n          variant: \"flush\",\n          children: shapes.map((item, index) => /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n            className: \"d-flex justify-content-between align-items-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(Badge, {\n                bg: getBadgeColor(item.shape),\n                className: \"me-2\",\n                children: item.shape.charAt(0).toUpperCase() + item.shape.slice(1)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 35,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 34,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-muted\",\n              children: [\"Area: \", Math.round(item.area), \" pixels\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 39,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n};\n_c = ShapeResult;\nexport default ShapeResult;\nvar _c;\n$RefreshReg$(_c, \"ShapeResult\");","map":{"version":3,"names":["React","Card","ListGroup","Badge","jsxDEV","_jsxDEV","ShapeResult","shapes","getBadgeColor","shape","colorMap","triangle","square","rectangle","pentagon","circle","children","Header","className","fileName","_jsxFileName","lineNumber","columnNumber","Body","length","variant","map","item","index","Item","bg","charAt","toUpperCase","slice","Math","round","area","_c","$RefreshReg$"],"sources":["C:/Users/sumit/OneDrive/Desktop/SHAPE/shape-detector/frontend/src/components/ShapeResult.js"],"sourcesContent":["import React from \"react\";\r\nimport { Card, ListGroup, Badge } from \"react-bootstrap\";\r\n\r\nconst ShapeResult = ({ shapes }) => {\r\n  // Function to get badge color based on shape type\r\n  const getBadgeColor = (shape) => {\r\n    const colorMap = {\r\n      triangle: \"warning\",\r\n      square: \"primary\",\r\n      rectangle: \"info\",\r\n      pentagon: \"success\",\r\n      circle: \"danger\",\r\n    };\r\n    return colorMap[shape] || \"secondary\";\r\n  };\r\n\r\n  return (\r\n    <Card>\r\n      <Card.Header className=\"bg-light\">\r\n        <h4 className=\"mb-0\">Detected Shapes</h4>\r\n      </Card.Header>\r\n      <Card.Body>\r\n        {shapes.length === 0 ? (\r\n          <p className=\"text-muted\">No shapes detected in the image.</p>\r\n        ) : (\r\n          <div>\r\n            <p>Found {shapes.length} shape(s) in the image:</p>\r\n            <ListGroup variant=\"flush\">\r\n              {shapes.map((item, index) => (\r\n                <ListGroup.Item\r\n                  key={index}\r\n                  className=\"d-flex justify-content-between align-items-center\"\r\n                >\r\n                  <div>\r\n                    <Badge bg={getBadgeColor(item.shape)} className=\"me-2\">\r\n                      {item.shape.charAt(0).toUpperCase() + item.shape.slice(1)}\r\n                    </Badge>\r\n                  </div>\r\n                  <div className=\"text-muted\">\r\n                    Area: {Math.round(item.area)} pixels\r\n                  </div>\r\n                </ListGroup.Item>\r\n              ))}\r\n            </ListGroup>\r\n          </div>\r\n        )}\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default ShapeResult;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}